
module ThorAxe

using CondaPkg

export thoraxe

# utils
# =====

"""Convert `value` to a string suitable for the CLI."""
_stringify(x) = string(x)
_stringify(v::Union{AbstractVector,Tuple}) = join(string.(v), ",")

"""Append CLI flags to `cmd_parts` while skipping unset values."""
function _push_option!(cmd_parts::Vector{String}, flags)
    for (flag, value) in flags
        value === nothing && continue
        if value isa Bool
            value && push!(cmd_parts, flag)
        else
            push!(cmd_parts, flag)
            push!(cmd_parts, _stringify(value))
        end
    end
    return cmd_parts
end


# thoraxe
# =======

const DEFAULT_CANONICAL_CRITERIA = "MinimumConservation,MinimumTranscriptWeightedConservation,MeanTranscriptWeightedConservation,TranscriptLength,TSL"

# Centralise the defaults so the docstring and the CLI builder stay in sync.
const THORAXE_DEFAULTS = (
    aligner="ProGraphMSA",
    maxtsl=3,
    minlen=4,
    mingenes=1,
    mintranscripts=2,
    coverage=80.0,
    identity=30.0,
    gapopen=-10,
    gapextend=-1,
    rescue_unaligned_subexons=false,
    padding=10,
    phylosofs=false,
    no_movements=false,
    no_disintegration=false,
    plot_chimerics=false,
    specieslist=nothing,
    canonical_criteria=DEFAULT_CANONICAL_CRITERIA
)

"""
    thoraxe([inputdir[, outputdir]]; kwargs...)

Run `thoraxe` from Julia. Positional arguments match the thoraxe CLI ones:

  * `inputdir` : input directory. The input folder should have an Ensembl subfolder as the 
    generated by `transcript_query`, defaults to $(repr(".")))
  * `outputdir` : target directory, defaults to an empty string so `thoraxe` reuses the 
    input folder.

The following keyword arguments are available (with their respective default values in 
parentheses):

  * `aligner`: path to ProGraphMSA ($(repr(THORAXE_DEFAULTS.aligner))).
  * `maxtsl`: maximum Transcript Support Level (TSL) to use when TSL is available for a 
    transcript ($(repr(THORAXE_DEFAULTS.maxtsl))).
  * `minlen`: minimum exon length ($(repr(THORAXE_DEFAULTS.minlen))).
  * `mingenes`: minimum number of genes to consider a path in the 
    splice graph ($(repr(THORAXE_DEFAULTS.mingenes))).
  * `mintranscripts`: minimum number of transcripts to consider a path in the 
    splice graph ($(repr(THORAXE_DEFAULTS.mintranscripts))).
  * `coverage`: minimum alignment coverage of the shorter exon to include both exons in 
    the same cluster ($(repr(THORAXE_DEFAULTS.coverage))).
  * `identity`: minimum percent identity to include exons in the same 
    cluster ($(repr(THORAXE_DEFAULTS.identity))).
  * `gapopen` : penalty for a gap opening ($(repr(THORAXE_DEFAULTS.gapopen))).
  * `gapextend`: penalty for gap extensions ($(repr(THORAXE_DEFAULTS.gapextend))).
  * `rescue_unaligned_subexons`: enable sub-exon rescue. The sub-exons that do not align 
    against any other are deleted from their cluster, and they could be reassigned during 
    the sub-exon rescue phase. By default, they are kept into their original 
    exon cluster. ($(repr(THORAXE_DEFAULTS.rescue_unaligned_subexons))).
  * `padding`: length of padding, Xs, in the chimeric 
    alignment ($(repr(THORAXE_DEFAULTS.padding))).
  * `phylosofs`: save inputs to run PhyloSofS in the `phylosofs` 
    folder ($(repr(THORAXE_DEFAULTS.phylosofs))).
  * `no_movements`: do not move one/two residue 
    sub-exon blocks ($(repr(THORAXE_DEFAULTS.no_movements))).
  * `no_disintegration`: do not disintegrate one-residue-length 
    s-exons ($(repr(THORAXE_DEFAULTS.no_disintegration))).
  * `plot_chimerics`: save plotly/html plot for the chimeric alignments in 
    the `_intermediate` folder ($(repr(THORAXE_DEFAULTS.plot_chimerics))).
  * `specieslist`: it could be a list of more than one species separated by commas and 
    without spaces, e.g. homo_sapiens,mus_musculus, or a single file with the species
    list (one species per line). If nothing is indicated, all the available species
    are used ($(repr(THORAXE_DEFAULTS.specieslist))).
  * `canonical_criteria`: list of column names of the path_table separated by commas used 
    to sort the row. If nothing is indicated, 
    the following list is used: $(repr(DEFAULT_CANONICAL_CRITERIA))
"""
function thoraxe(inputdir::AbstractString=".",
    outputdir::Union{Nothing,AbstractString}="";
    aligner::AbstractString=THORAXE_DEFAULTS.aligner,
    maxtsl::Integer=THORAXE_DEFAULTS.maxtsl,
    minlen::Integer=THORAXE_DEFAULTS.minlen,
    mingenes::Integer=THORAXE_DEFAULTS.mingenes,
    mintranscripts::Integer=THORAXE_DEFAULTS.mintranscripts,
    coverage::Real=THORAXE_DEFAULTS.coverage,
    identity::Real=THORAXE_DEFAULTS.identity,
    gapopen::Integer=THORAXE_DEFAULTS.gapopen,
    gapextend::Integer=THORAXE_DEFAULTS.gapextend,
    rescue_unaligned_subexons::Bool=THORAXE_DEFAULTS.rescue_unaligned_subexons,
    padding::Integer=THORAXE_DEFAULTS.padding,
    phylosofs::Bool=THORAXE_DEFAULTS.phylosofs,
    no_movements::Bool=THORAXE_DEFAULTS.no_movements,
    no_disintegration::Bool=THORAXE_DEFAULTS.no_disintegration,
    plot_chimerics::Bool=THORAXE_DEFAULTS.plot_chimerics,
    specieslist::Union{Nothing,AbstractString,AbstractVector{<:AbstractString}}=THORAXE_DEFAULTS.specieslist,
    canonical_criteria::Union{Nothing,AbstractString,AbstractVector{<:AbstractString}}=THORAXE_DEFAULTS.canonical_criteria)
    # Structured as a tuple so ordering matches the CLI help output.
    flags = (
        "--inputdir" => inputdir,
        "--outputdir" => outputdir,
        "--aligner" => aligner,
        "--maxtsl" => maxtsl,
        "--minlen" => minlen,
        "--mingenes" => mingenes,
        "--mintranscripts" => mintranscripts,
        "--coverage" => coverage,
        "--identity" => identity,
        "--gapopen" => gapopen,
        "--gapextend" => gapextend,
        "--rescue_unaligned_subexons" => rescue_unaligned_subexons,
        "--padding" => padding,
        "--phylosofs" => phylosofs,
        "--no_movements" => no_movements,
        "--no_disintegration" => no_disintegration,
        "--plot_chimerics" => plot_chimerics,
        "--specieslist" => specieslist,
        "--canonical_criteria" => canonical_criteria,
        "--version" => version,
    )
    cmd_parts = String["thoraxe"]
    _push_option!(cmd_parts, flags)
    CondaPkg.withenv() do
        run(Cmd(cmd_parts))
    end
end

end # module
